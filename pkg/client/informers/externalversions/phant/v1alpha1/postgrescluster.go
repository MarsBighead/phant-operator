// Authors: Marsbighead <duanhmhy@126.com>
//
// Copyright (c) 2024 Marsbighead
//
// Permission is hereby granted, free of charge, to any person
// obtaining a copy of this software and associated documentation
// files (the "Software"), to deal in the Software without
// restriction, including without limitation the rights to use,
// copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following
// conditions:
//
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
// Code generated by informer-gen. DO NOT EDIT.

package v1alpha1

import (
	"context"
	phantv1alpha1 "phant-operator/pkg/apis/phant/v1alpha1"
	versioned "phant-operator/pkg/client/clientset/versioned"
	internalinterfaces "phant-operator/pkg/client/informers/externalversions/internalinterfaces"
	v1alpha1 "phant-operator/pkg/client/listers/phant/v1alpha1"
	time "time"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// PostgresClusterInformer provides access to a shared informer and lister for
// PostgresClusters.
type PostgresClusterInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() v1alpha1.PostgresClusterLister
}

type postgresClusterInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
	namespace        string
}

// NewPostgresClusterInformer constructs a new informer for PostgresCluster type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewPostgresClusterInformer(client versioned.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredPostgresClusterInformer(client, namespace, resyncPeriod, indexers, nil)
}

// NewFilteredPostgresClusterInformer constructs a new informer for PostgresCluster type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredPostgresClusterInformer(client versioned.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.PhantV1alpha1().PostgresClusters(namespace).List(context.TODO(), options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.PhantV1alpha1().PostgresClusters(namespace).Watch(context.TODO(), options)
			},
		},
		&phantv1alpha1.PostgresCluster{},
		resyncPeriod,
		indexers,
	)
}

func (f *postgresClusterInformer) defaultInformer(client versioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredPostgresClusterInformer(client, f.namespace, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *postgresClusterInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&phantv1alpha1.PostgresCluster{}, f.defaultInformer)
}

func (f *postgresClusterInformer) Lister() v1alpha1.PostgresClusterLister {
	return v1alpha1.NewPostgresClusterLister(f.Informer().GetIndexer())
}
