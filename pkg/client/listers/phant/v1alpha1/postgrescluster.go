// Authors: Marsbighead <duanhmhy@126.com>
//
// Copyright (c) 2024 Marsbighead
//
// Permission is hereby granted, free of charge, to any person
// obtaining a copy of this software and associated documentation
// files (the "Software"), to deal in the Software without
// restriction, including without limitation the rights to use,
// copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following
// conditions:
//
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "phant-operator/pkg/apis/phant/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PostgresClusterLister helps list PostgresClusters.
// All objects returned here must be treated as read-only.
type PostgresClusterLister interface {
	// List lists all PostgresClusters in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PostgresCluster, err error)
	// PostgresClusters returns an object that can list and get PostgresClusters.
	PostgresClusters(namespace string) PostgresClusterNamespaceLister
	PostgresClusterListerExpansion
}

// postgresClusterLister implements the PostgresClusterLister interface.
type postgresClusterLister struct {
	indexer cache.Indexer
}

// NewPostgresClusterLister returns a new PostgresClusterLister.
func NewPostgresClusterLister(indexer cache.Indexer) PostgresClusterLister {
	return &postgresClusterLister{indexer: indexer}
}

// List lists all PostgresClusters in the indexer.
func (s *postgresClusterLister) List(selector labels.Selector) (ret []*v1alpha1.PostgresCluster, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PostgresCluster))
	})
	return ret, err
}

// PostgresClusters returns an object that can list and get PostgresClusters.
func (s *postgresClusterLister) PostgresClusters(namespace string) PostgresClusterNamespaceLister {
	return postgresClusterNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PostgresClusterNamespaceLister helps list and get PostgresClusters.
// All objects returned here must be treated as read-only.
type PostgresClusterNamespaceLister interface {
	// List lists all PostgresClusters in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PostgresCluster, err error)
	// Get retrieves the PostgresCluster from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.PostgresCluster, error)
	PostgresClusterNamespaceListerExpansion
}

// postgresClusterNamespaceLister implements the PostgresClusterNamespaceLister
// interface.
type postgresClusterNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PostgresClusters in the indexer for a given namespace.
func (s postgresClusterNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PostgresCluster, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PostgresCluster))
	})
	return ret, err
}

// Get retrieves the PostgresCluster from the indexer for a given namespace and name.
func (s postgresClusterNamespaceLister) Get(name string) (*v1alpha1.PostgresCluster, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("postgrescluster"), name)
	}
	return obj.(*v1alpha1.PostgresCluster), nil
}
