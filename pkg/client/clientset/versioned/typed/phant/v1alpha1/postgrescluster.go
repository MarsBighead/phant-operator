// Authors: Marsbighead <duanhmhy@126.com>
//
// Copyright (c) 2024 Marsbighead
//
// Permission is hereby granted, free of charge, to any person
// obtaining a copy of this software and associated documentation
// files (the "Software"), to deal in the Software without
// restriction, including without limitation the rights to use,
// copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following
// conditions:
//
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	"context"
	v1alpha1 "phant-operator/pkg/apis/phant/v1alpha1"
	scheme "phant-operator/pkg/client/clientset/versioned/scheme"
	"time"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// PostgresClustersGetter has a method to return a PostgresClusterInterface.
// A group's client should implement this interface.
type PostgresClustersGetter interface {
	PostgresClusters(namespace string) PostgresClusterInterface
}

// PostgresClusterInterface has methods to work with PostgresCluster resources.
type PostgresClusterInterface interface {
	Create(ctx context.Context, postgresCluster *v1alpha1.PostgresCluster, opts v1.CreateOptions) (*v1alpha1.PostgresCluster, error)
	Update(ctx context.Context, postgresCluster *v1alpha1.PostgresCluster, opts v1.UpdateOptions) (*v1alpha1.PostgresCluster, error)
	UpdateStatus(ctx context.Context, postgresCluster *v1alpha1.PostgresCluster, opts v1.UpdateOptions) (*v1alpha1.PostgresCluster, error)
	Delete(ctx context.Context, name string, opts v1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error
	Get(ctx context.Context, name string, opts v1.GetOptions) (*v1alpha1.PostgresCluster, error)
	List(ctx context.Context, opts v1.ListOptions) (*v1alpha1.PostgresClusterList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.PostgresCluster, err error)
	PostgresClusterExpansion
}

// postgresClusters implements PostgresClusterInterface
type postgresClusters struct {
	client rest.Interface
	ns     string
}

// newPostgresClusters returns a PostgresClusters
func newPostgresClusters(c *PhantV1alpha1Client, namespace string) *postgresClusters {
	return &postgresClusters{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the postgresCluster, and returns the corresponding postgresCluster object, and an error if there is any.
func (c *postgresClusters) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1alpha1.PostgresCluster, err error) {
	result = &v1alpha1.PostgresCluster{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("postgresclusters").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do(ctx).
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of PostgresClusters that match those selectors.
func (c *postgresClusters) List(ctx context.Context, opts v1.ListOptions) (result *v1alpha1.PostgresClusterList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1alpha1.PostgresClusterList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("postgresclusters").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do(ctx).
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested postgresClusters.
func (c *postgresClusters) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("postgresclusters").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch(ctx)
}

// Create takes the representation of a postgresCluster and creates it.  Returns the server's representation of the postgresCluster, and an error, if there is any.
func (c *postgresClusters) Create(ctx context.Context, postgresCluster *v1alpha1.PostgresCluster, opts v1.CreateOptions) (result *v1alpha1.PostgresCluster, err error) {
	result = &v1alpha1.PostgresCluster{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("postgresclusters").
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(postgresCluster).
		Do(ctx).
		Into(result)
	return
}

// Update takes the representation of a postgresCluster and updates it. Returns the server's representation of the postgresCluster, and an error, if there is any.
func (c *postgresClusters) Update(ctx context.Context, postgresCluster *v1alpha1.PostgresCluster, opts v1.UpdateOptions) (result *v1alpha1.PostgresCluster, err error) {
	result = &v1alpha1.PostgresCluster{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("postgresclusters").
		Name(postgresCluster.Name).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(postgresCluster).
		Do(ctx).
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *postgresClusters) UpdateStatus(ctx context.Context, postgresCluster *v1alpha1.PostgresCluster, opts v1.UpdateOptions) (result *v1alpha1.PostgresCluster, err error) {
	result = &v1alpha1.PostgresCluster{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("postgresclusters").
		Name(postgresCluster.Name).
		SubResource("status").
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(postgresCluster).
		Do(ctx).
		Into(result)
	return
}

// Delete takes name of the postgresCluster and deletes it. Returns an error if one occurs.
func (c *postgresClusters) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("postgresclusters").
		Name(name).
		Body(&opts).
		Do(ctx).
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *postgresClusters) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	var timeout time.Duration
	if listOpts.TimeoutSeconds != nil {
		timeout = time.Duration(*listOpts.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Namespace(c.ns).
		Resource("postgresclusters").
		VersionedParams(&listOpts, scheme.ParameterCodec).
		Timeout(timeout).
		Body(&opts).
		Do(ctx).
		Error()
}

// Patch applies the patch and returns the patched postgresCluster.
func (c *postgresClusters) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.PostgresCluster, err error) {
	result = &v1alpha1.PostgresCluster{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("postgresclusters").
		Name(name).
		SubResource(subresources...).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(data).
		Do(ctx).
		Into(result)
	return
}
